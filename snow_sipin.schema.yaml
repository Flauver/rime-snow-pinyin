# Rime schema
# encoding: utf-8

schema:
  schema_id: snow_sipin
  name: 冰雪四拼
  version: "0.1"
  author:
    - 谭淞宸 <i@tansongchen.com>
  description: |
    带调拼音词顶功输入方案
  dependencies:
    - stroke
    - snow_pinyin
    - snow_stroke

switches:
  - name: ascii_mode
    reset: 0
    states: [中文, 西文]
  - name: full_shape
    states: [半角, 全角]
  - name: traditionalization
    states: [汉字, 漢字]
  - name: ascii_punct
    states: [。，, ．，]
  - name: popping
    states: [整句, 字词]
    reset: 1

engine:
  processors:
    - ascii_composer
    - lua_processor@*snow.shape_processor
    - lua_processor@*snow.select_character
    - recognizer
    - key_binder
    - lua_processor@*snow.editor
    - lua_processor@*snow.popping
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - affix_segmentor@stroke
    - affix_segmentor@pinyin
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - script_translator
    - table_translator@stroke
    - script_translator@pinyin
    - lua_translator@*snow.datetime
    - lua_translator@*snow.number
    - lua_translator@*snow.calculator
    - history_translator
  filters:
    - reverse_lookup_filter@lookup_pinyin
    - reverse_lookup_filter@lookup_sipin
    - lua_filter@*snow.fix
    - lua_filter@*snow.postpone
    - simplifier
    - uniquifier
    - lua_filter@*snow.shape_filter

sipin_algebra:
  # 无理音节
  - derive/san1/he3/ # 三
  - derive/wu3/gu2/ # 五
  - derive/ri4/ri1/ # 日
  # 还原
  - xform/(^| )(h?)([mn]g?\d)/$1$2e$3/
  - xform/(^| )wu?/$1u/
  - xform/(^| )yu/$1ü/
  - xform/(^| )yi?/$1i/
  - xform/((?<=[jqx])u|(?<=[nl])v)/ü/
  - xform/iu/iou/
  - xform/u([in])/ue$1/
  - xform/ao/au/
  # 声码
  - xform/zh/w/
  - xform/ch/y/
  - xform/sh/v/
  - xform/(^| )(?=[aoe])/$1r/
  - xform/(^| )(?=i)/$1f/
  - xform/(^| )(?=u)/$1s/
  - xform/(^| )(?=ü)/$1k/
  # 韵头
  - xform/ia/u/
  - xform/ua/i/
  - xform/üa/o/
  - xform/ie/e/
  - xform/ue/u/
  - xform/üe/o/
  - xform/io/o/
  - xform/uo/o/
  - xform/er/i/
  - xform/ü/a/
  # 韵尾
  - xform/ng(?=\d)/e/
  - xform/n(?=\d)/o/
  - xform/m(?=\d)/a/
  # 声调
  - xlit/12345/ieuao/

speller:
  alphabet: bpmfdtnlgkhjqxzcsrwyvaeiou`
  initials: bpmfdtnlgkhjqxzcsrwyv
  delimiter: " "
  popping:
    # 单字、二字词、三字词
    - when: popping
      match: "([bpmfdtnlgkhjqxzcsrywv][aeuio]{0,4}){1,3}[aeiou]+"
      accept: "[bpmfdtnlgkhjqxzcsrywv]"
    # 四字词和多字词
    - when: popping
      match: "([bpmfdtnlgkhjqxzcsrywv][aeuio]{0,4}){4,}"
      accept: "[bpmfdtnlgkhjqxzcsrywv]"
    # 大写参与编码
    - when: popping
      match: "([bpmfdtnlgkhjqxzcsrywv][aeuio]{0,4}){4,}"
      accept: "[BPMFDTNLGKHJQXZCSRYWV]"
      strategy: append
    # 顶标点
    - match: ".*[^a-z0-9]"
      accept: "[bpmfdtnlgkhjqxzcsrywv]"
    # 标点大写顶
    - match: ".*[a-z0-9;']"
      accept: "[^a-z0-9;' ]"
  algebra:
    __include: /sipin_algebra
    __append:
      # 补码
      - derive/^([a-z]{3})$/$1o/
      # 简拼及无声调的全拼
      - abbrev/^([a-z]).+$/$1/
      - derive/[aeiou]$//
      # 字词模式下的简码；整句模式下应注释掉以提升准确度
      - derive/^([a-z]{2}).+$/$1/
      # 字母
      - xform/~{1,2}a/woa/
      - xform/~{1,2}e/voe/
      - xform/~{1,2}i/sei/
      - xform/~{1,2}o/teo/
      - xform/~{1,2}u/seu/
      - xform/~{1,2}([bp])/$1ea/
      - xform/~{1,2}f/foa/
      - xform/~{1,2}k/kuee/
      - xform/~{1,2}h/hiu/
      - xform/~{1,2}([jqx])/$1eo/
      - xform/~{1,2}([mgdtnlzcsrywv])/$1oo/

translator:
  dictionary: snow_pinyin
  prism: snow_sipin
  packs:
    - snow_pinyin.base
    - snow_pinyin.ext

stroke:
  tag: stroke
  dictionary: stroke
  prism: snow_stroke
  enable_user_dict: false
  enable_sentence: false
  enable_completion: true
  prefix: "u"
  suffix: "'"
  tips: 〔笔画〕
  preedit_format:
    - xlit/eiuoa/一丨丿丶乙/

pinyin:
  tag: pinyin
  dictionary: snow_pinyin
  packs:
    - snow_pinyin.base
    - snow_pinyin.ext
  enable_user_dict: false
  enable_sentence: false
  prefix: "a"
  suffix: "'"
  tips: 〔拼音〕

history:
  tag: history
  input: "e"
  size: 5
  initial_quality: -1

lookup_pinyin:
  tags: [stroke]
  overwrite_comment: true
  dictionary: snow_pinyin
  comment_format:
    - xform/([nl])v/$1ü/

lookup_sipin:
  tags: [pinyin]
  overwrite_comment: true
  dictionary: snow_pinyin
  comment_format:
    __include: /sipin_algebra

punctuator:
  import_preset: snow_pinyin.symbols
  half_shape:
    ";": 的
    "/": 了
    "i": ；

key_binder:
  select_first_character: bracketleft
  select_last_character: bracketright
  bindings:
    # Emacs 编辑键
    - { accept: "Control+p", send: Up, when: composing }
    - { accept: "Control+n", send: Down, when: composing }
    - { accept: "Control+b", send: Left, when: composing }
    - { accept: "Control+f", send: Right, when: composing }
    - { accept: "Control+a", send: Home, when: composing }
    - { accept: "Control+e", send: End, when: composing }
    - { accept: "Control+d", send: Delete, when: composing }
    - { accept: "Control+k", send: "Shift+Delete", when: composing }
    - { accept: "Control+h", send: BackSpace, when: composing }
    - { accept: "Control+g", send: Escape, when: composing }
    - { accept: "Control+bracketleft", send: Escape, when: composing }
    - { accept: "Control+y", send: Page_Up, when: composing }
    - { accept: "Alt+v", send: Page_Up, when: composing }
    - { accept: "Control+v", send: Page_Down, when: composing }
    # 翻页
    - { when: has_menu, accept: Tab, send: Page_Down }
    - { when: paging, accept: Shift+Tab, send: Page_Up }
    # 定位
    - { when: has_menu, accept: 1, send_sequence: "{Shift+Right}" }
    - { when: has_menu, accept: 4, send_sequence: "{Shift+Right}{Shift+Right}" }
    - { when: has_menu, accept: 5, send_sequence: "{Shift+Right}{Shift+Right}{Shift+Right}" }
    - { when: has_menu, accept: 6, send_sequence: "{Shift+Right}{Shift+Right}{Shift+Right}{Shift+Right}" }
    - { when: has_menu, accept: 7, send_sequence: "{End}" }
    # 切换
    - { accept: "Control+Shift+1", select: .next, when: always }
    - { accept: "Control+Shift+2", toggle: ascii_mode, when: always }
    - { accept: "Control+Shift+3", toggle: full_shape, when: always }
    - { accept: "Control+Shift+4", toggle: traditionalization, when: always }
    - { accept: "Control+Shift+5", toggle: ascii_punct, when: always }
    - { accept: "Control+Shift+exclam", select: .next, when: always }
    - { accept: "Control+Shift+at", toggle: ascii_mode, when: always }
    - { accept: "Control+Shift+numbersign", toggle: full_shape, when: always }
    - { accept: "Control+Shift+dollar", toggle: traditionalization, when: always }
    - { accept: "Control+Shift+percent", toggle: ascii_punct, when: always }

simplifier:
  opencc_config: s2t.json
  option_name: traditionalization

recognizer:
  patterns:
    punct: '^e([0-9]0?|[A-Za-z]+)$'
    pinyin: "^a[a-z]*'?$"
    stroke: "^u[a-z]*'?$"
    lua: "^o.*$"
    history: "^e$"

menu:
  alternative_select_keys: "_23890"
  page_size: 6
